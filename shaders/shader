#shader vertex
#version 450 core

layout(location= 0) in vec3 position;
layout(location= 1) in vec3 normal;

uniform float time;
uniform vec2 direction;

float rotscale = 0.01;
float x = direction.x * rotscale;
float y = direction.y * rotscale;

mat4 rotx (float angle) {
  return mat4(cos(time),-sin(time),0,0, sin(time), cos(time), 0,0, 0,0,1,0, 0,0,0,1);
}
mat4 roty (float angle) {
  return mat4(cos(time),0, sin(time),0, 0, 1, 0,0, -sin(time),0,cos(time),0, 0, 0, 0,1);
}

out vec4 aColor;

void main(){
  mat4 nrotx = transpose(rotx(-time));
  mat4 nroty = transpose(roty(-time));

  vec4 light = vec4(1,1,1, 0);
  vec4 tnorm = nrotx*nroty*vec4(normal, 1);
  float d = dot(light, tnorm);

  aColor = vec4(d,d,d,1);
  gl_Position = rotx(time)*roty(time)*vec4(position, 1);
}

#shader fragment
#version 450 core

precision mediump float;

in vec4 aColor;
out vec4 color;

void main(){
  color = aColor;
}
