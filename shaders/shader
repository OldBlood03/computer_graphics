#shader vertex
#version 450 core

layout(location= 0) in vec3 position;
layout(location= 1) in vec3 normal;

uniform float time;
uniform vec2 direction;

float rotscale = 0.01;
float x = direction.x * rotscale;
float y = direction.y * rotscale;

mat4 rotx (float angle) {
  return mat4(cos(angle),-sin(angle),0,0, sin(angle), cos(angle), 0,0, 0,0,1,0, 0,0,0,1);
}
mat4 roty (float angle) {
  return mat4(cos(angle),0, sin(angle),0, 0, 1, 0,0, -sin(angle),0,cos(angle),0, 0, 0, 0,1);
}

float fov = 10; 
float aspect = 1;
float near = -1; 
float far = 1; 

mat4 proj(float fov, float aspect, float near, float far) {
    float tanHalfFov = tan(fov / 2.0);
    return mat4(
        1.0 / (aspect * tanHalfFov), 0.0, 0.0, 0.0,
        0.0, 1.0 / tanHalfFov, 0.0, 0.0,
        0.0, 0.0, -(far + near) / (far - near), -1.0,
        0.0, 0.0, -(2.0 * far * near) / (far - near), 0.0
    );
}

out vec4 aColor;

void main(){
  mat4 nrotx = transpose(rotx(-x));
  mat4 nroty = transpose(roty(-y));

  vec4 light = vec4(1,1,1, 0);
  vec4 tnorm = nrotx*nroty*vec4(-normal, 1);
  float d = dot(light, tnorm);

  aColor = vec4(d,d,d,1);
  gl_Position = rotx(x)*roty(y)*vec4(position, 1);
}

#shader fragment
#version 450 core

precision mediump float;

in vec4 aColor;
out vec4 color;

void main(){
  color = vec4(0.5,0.0,0.5,1);
}
